BROKER SCHEMA Qiwa.Framework.Lib
PATH Qiwa.Framework.Lib;




CREATE COMPUTE MODULE InternalServiceCaller_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL CopyEntireMessage();
		--CALL CopyMessageHeaders();
		--SET OutputRoot.MQMD = InputRoot.MQMD;
		--SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		--SET OutputRoot.Properties = InputRoot.Properties;
		--SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
	
		-- Set CorellationID as IVR Message ID
		-- the correlation ID shouldn't exceed 24 char
		DECLARE ServiceName1 CHAR FIELDNAME(InputRoot.XMLNSC.*:*[<]);
		DECLARE rEsbXMLHeader REFERENCE TO InputRoot.XMLNSC.*:*[<].Header;
		DECLARE rOutLocalEnv REFERENCE TO OutputLocalEnvironment;
		DECLARE rOutRoot REFERENCE TO OutputRoot;

		/* To use the original candidate Msg MQ header., Distinguish (correlation) will be by channel ID. */
		DECLARE corrID BLOB;

		SET corrID = getChannelCorrelationID('MW', rEsbXMLHeader.TransactionId, CAST(Environment.InternalServiceCaller.callCorrIDOffset AS CHAR));			
		SET OutputRoot.MQMD.MsgId = 	corrID;
		SET OutputRoot.MQMD.CorrelId= 	corrID;
		
		DECLARE ERROR_CODE CHAR '';
		SET ERROR_CODE =  SetQueues(rEsbXMLHeader, rOutLocalEnv, rOutRoot);
		
		IF ERROR_CODE = ESB_MIDDLEWARE_UN_AUTHORIZED_OPERATION_RESPONSE_CODE THEN
			CALL CreateEsbXMLResponseHeaderFromRoot(ESB_MIDDLEWARE_UN_AUTHORIZED_OPERATION_RESPONSE_CODE, InputRoot, OutputRoot,getServiceResponseName(ServiceName1)); 
		
			DELETE LASTCHILD OF OutputRoot.XMLNSC.*:*[<];
		
			RETURN TRUE;					
		END IF;
		
		DECLARE flowName CHAR getFlowNameWithouSchema(Environment.FlowNameSplit);
		declare loadedPriorityRef reference to Environment.Properties.{ApplicationLabel}.{flowName};
		
		IF EXISTS(loadedPriorityRef.Variables.InternalCallerTimeOut[]) THEN 
		SET rOutLocalEnv.MQ.GET.MQGMO.WaitInterval = CAST(loadedPriorityRef.Variables.InternalCallerTimeOut AS INT);
		END IF;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


