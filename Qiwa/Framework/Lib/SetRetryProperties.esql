BROKER SCHEMA Qiwa.Framework.Lib
PATH Qiwa.Framework.Lib;





DECLARE MAX_RETRY_COUNT EXTERNAL INT 0;
DECLARE MIN_WAIT_TIME_SEC EXTERNAL INT 60;
CREATE COMPUTE MODULE SetRetryProperties
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		CALL CopyEntireMessage();
		DECLARE flowName CHAR getFlowNameWithouSchema(Environment.FlowNameSplit);
		--SET OutputRoot.MQMD.ReplyToQ = InputRoot.MQMD.SourceQueue;

		DECLARE retryHeader BOOLEAN FALSE;

		IF EXISTS(InputRoot.MQRFH2.usr.retry[]) THEN
			SET retryHeader = TRUE;
		END IF;

		IF EXISTS(Environment.Properties.{ApplicationLabel}.{flowName}.Retry[]) THEN

			IF CAST(Environment.Properties.{ApplicationLabel}.{flowName}.Retry.RetryEnabled AS BOOLEAN) THEN

				IF NOT retryHeader THEN
					SET OutputRoot.MQRFH2.usr.retry.maxRetryCount = CAST(Environment.Properties.{ApplicationLabel}.{flowName}.Retry.maxRetryCount AS INT);
					SET OutputRoot.MQRFH2.usr.retry.minWaitDurationSec = CAST(Environment.Properties.{ApplicationLabel}.{flowName}.Retry.minWaitDurationSec AS INT);
					SET OutputRoot.MQRFH2.usr.retry.sourceQueue = InputRoot.MQMD.SourceQueue;
				END IF;

				RETURN TRUE;

			ELSE

				RETURN FALSE;

			END IF;

		ELSE

			IF NOT retryHeader THEN
				SET OutputRoot.MQRFH2.usr.retry.maxRetryCount = MAX_RETRY_COUNT;
				SET OutputRoot.MQRFH2.usr.retry.minWaitDurationSec = MIN_WAIT_TIME_SEC;
				SET OutputRoot.MQRFH2.usr.retry.sourceQueue = InputRoot.MQMD.SourceQueue;
			END IF;

			RETURN TRUE;

		END IF;			

	   
	    


	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;